// (control z)
#import './bookmarks.js'


(function(){

    if(Bookmarker.isInOverviewMode()) {
        Narrator.command("control-z","Exit Overview Mode");
        Bookmarker.exitOverviewMode();
    } else {
        Narrator.command("control-z","Enter Overview Mode");
        Bookmarker.enterOverviewMode();
    }

})();

var processMe = function() {


    if(Bookmarker.isInOverviewMode()) {
        Bookmarker.exitOverviewMode();
    } else {
        Bookmarker.enterOverviewMode();
        SpeakerDeck.showKeyStoke("control-z","Enter Overview Mode");
    }


    return;

    // SpeakerDeck.showKeyStoke("control-z","Draw Regions");



    function findSelectorMeta(layer) {
        var metaLayer=SketchQuery.findOne(layer.layers().array(),"name == '#selectorMetaLayer#'");
        if(!metaLayer) return null;
        if(metaLayer.layers().count()<1) return null;

        return JSON.parse(metaLayer.layers().firstObject().name());
    }


    if(Bookmarker.isInOverviewMode()) {

        if(selection.count()==1)  {
            // Only one layer is selected.
            // If it's a bookmark region - we navigate to it, otherwise we center on selected layer.
            var layer = selection.firstObject();

            var bookmark=findSelectorMeta(layer);
            if(bookmark) {
                // Bookmarker.removeRegionsOverlay();
                Bookmarker.navigateToBookmark(bookmark,bookmark.slot);
            } else {
                removeRegionsOverlay();
                View.centerRect(layer.absoluteRect());
            }

        } else if(selection.count()>1) {
            View.zoomToSelection();
            Bookmarker.removeRegionsOverlay();
            utils.selectAllLayers();

        } else {
            Bookmarker.removeRegionsOverlay();
            // loadLocationData();
        }

        return;

    } else {


    }

    // Presenting Bird View Mode! :)
    utils.deselectAllLayers();

    var meta = Bookmarker.meta();
    var bookmarks=meta.bookmarks;

    // saveLocationData();




    function createBookmarkRegion(bookmark) {

        var baseColor="#D0021B";

        function createIndexShape(index,size,iconScaleFactor) {
            var iconScaleFactor = iconScaleFactor || 0.7;

            var group=MSLayerGroup.alloc().init();

            // Add Index Background.
            var ovalShape = MSOvalShape.alloc().init();
            ovalShape.frame = MSRect.rectWithRect(NSMakeRect(0,0,size,size));

            var shapeGroup=ovalShape.embedInShapeGroup();
            var fill = shapeGroup.style().fills().addNewStylePart();
            fill.color = utils.colorWithHex(baseColor);

            group.addLayers([shapeGroup]);

            // Add Index Label.
            var label=group.addLayerOfType("text");
            label.stringValue=index.toString();
            label.fontSize=Math.round(size*iconScaleFactor);
            //label.adjustFrameToFit();
            label.textBehaviour=1;
            label.textAlignment=2;

            var fill = label.style().fills().addNewStylePart();
            fill.color = utils.colorWithHex("#ffffff");

            //label.frame().midX=shapeGroup.frame().midX();
            label.frame().x=shapeGroup.frame().x();
            label.frame().width=shapeGroup.frame().width();
            label.frame().midY=shapeGroup.frame().midY();
            // label.frame().makeRectIntegral();

            group.resizeRoot(true);

            return group;
        }

        var rc=view.totalRectForLayers(doc.currentPage().layers().array());
        var viewPort=view.viewPortForZoomToFitRect(rc);

        var group=MSLayerGroup.alloc().init();
        group.name=bookmark.name;

        // Add meta-layer.
        var metaLayer=utils.createMetaLayer("#selectorMetaLayer#",JSON.stringify(bookmark));
        group.addLayers([metaLayer]);


        var regionBackground = Shaper.rect(bookmark.rect,
            { color: baseColor, alpha: 0.03 },
            { color: baseColor, thickness: 1, position: BorderPosition.Outside}
        );

        group.addLayers([regionBackground]);


        // Label.
        var frame = regionBackground.frame();

        var label=group.addLayerOfType("text");
        label.fontSize=11*(1/viewPort.zoomValue());
        label.stringValue=bookmark.name;
        /*
        var fill = label.style().fills().addNewStylePart();
        fill.color = utils.colorWithHex("#ffffff");
        */
        Shaper.fill(label,{ color:"#ffffff"});

        label.frame().x=frame.x()+3;
        label.frame().y=frame.y()+3;

        label.adjustFrameToFit();

        // Add text background.
        var backgroundLayer =  Shaper.rect({
                x: frame.x()-1,
                y: frame.y()-1,
                width: label.frame().width()+10,
                height: label.frame().height()+8
            },
            { color: baseColor },null,"0/0/5/0");

        group.insertLayers_beforeLayer([backgroundLayer],label);

        if(bookmark.slot) {

            var indexSize=Math.round(16*(1/viewPort.zoomValue()));
            print(indexSize);

            var indexPadding=3;
            var indexShape=createIndexShape(bookmark.slot,indexSize);
            indexShape.frame().x=regionBackground.frame().x()+bookmark.rect.width-indexSize-indexPadding;
            indexShape.frame().y=regionBackground.frame().y()+bookmark.rect.height-indexSize-indexPadding;

            group.insertLayers_afterLayer([indexShape],label);
        }

        group.resizeRoot(true);

        return group;
    }


    var group=MSLayerGroup.alloc().init();
    group.name = "Bookmars Regions";

    // Add meta layer.

    var metaLayer=utils.createMetaLayer("#allSelectorsMetaLayer#","none");
    group.addLayers([metaLayer]);

    var currentPageID=utils.currentPage().objectID();
    for(var i=0;i<bookmarks.length;i++) {
        var bookmark=bookmarks[i];

        var target=Bookmarker.findTargetLayers(bookmark.targets);
        if(bookmark.pageID==currentPageID) {

            if(target!=null) {
                // Update bookmark actual rect.
                bookmark.rect=utils.rectFromGKRect(View.totalRect(target));

                // Create region.
                var region=createBookmarkRegion(bookmark);
                group.insertLayers_afterLayer([region],metaLayer);
            } else {
                throw new Error("There is a dead bookmark here!");
            }

        }
    }

    group.hasClickThrough=true;
    group.resizeRoot(true);

    utils.currentPage().addLayers([group]);
    View.centerLayersInCanvas();

};